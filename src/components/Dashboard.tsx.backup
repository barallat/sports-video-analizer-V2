import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Trophy, Users, BarChart3, Settings, Plus, FileText } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { useLanguage } from '@/contexts/LanguageContext';
import { useSportConfigContext } from '@/contexts/SportConfigContext';
import { AppHeader } from '@/components/AppHeader';
import { AppFooter } from '@/components/AppFooter';

interface DashboardProps {
  onNavigate: (section: string) => void;
  onLogout: () => Promise<void>;
  userName?: string;
}

export function Dashboard({ onNavigate, onLogout, userName }: DashboardProps) {
  const { t } = useLanguage();
  const { 
    features, 
    sportName, 
    appName, 
    appDescription, 
    isMultiSport 
  } = useSportConfigContext();
  const [loading, setLoading] = useState(false);

  const handleLogout = async () => {
    setLoading(true);
    try {
      await onLogout();
    } catch (error) {
      console.error('Error during logout:', error);
    } finally {
      setLoading(false);
    }
  };

  // Construir menú basado en la configuración
  const baseMenuItems = [
    {
      id: 'sports-management',
      title: t('sports'),
      description: 'Configura los deportes que quieres analizar',
      icon: Trophy,
      color: 'bg-blue-500',
      show: features.showSportsManagement,
    },
    {
      id: 'teams',
      title: t('teams'),
      description: features.skipSportsConfig 
        ? `Gestiona tus equipos y jugadores de ${sportName}` 
        : 'Gestiona tus equipos y jugadores',
      icon: Users,
      color: 'bg-green-500',
      show: true, // Siempre visible
    },
    {
      id: 'analysis',
      title: t('analysis'),
      description: features.skipSportsConfig 
        ? `Crear nuevos análisis de movimientos de ${sportName}` 
        : 'Crear nuevos análisis de movimientos',
      icon: Plus,
      color: 'bg-purple-500',
      show: true, // Siempre visible
    },
    {
      id: 'results',
      title: t('results'),
      description: 'Ver resultados de análisis anteriores',
      icon: FileText,
      color: 'bg-orange-500',
      show: true, // Siempre visible
    },
    {
      id: 'statistics',
      title: t('statistics'),
      description: 'Estadísticas y métricas detalladas',
      icon: BarChart3,
      color: 'bg-red-500',
      show: true, // Siempre visible
    },
    {
      id: 'config',
      title: t('configuration'),
      description: 'Configuración general de la aplicación',
      icon: Settings,
      color: 'bg-gray-500',
      show: true, // Siempre visible
    },
  ];

  // Filtrar elementos según la configuración
  const menuItems = baseMenuItems.filter(item => item.show);

  // Manejar navegación especial para equipos
  const handleNavigate = (section: string) => {
    if (section === 'teams' && features.skipSportsConfig) {
      // Si está en modo deporte individual, ir directamente a equipos del deporte
      onNavigate('sport-teams');
    } else {
      onNavigate(section);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-primary/5 to-accent/5 flex flex-col">
      <AppHeader userName={userName} onLogout={handleLogout} />

      {/* Main Content */}
      <div className="flex-1 max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
        <div className="mb-8">
          <h2 className="text-3xl font-bold tracking-tight text-foreground mb-2">
            {appName}
          </h2>
          <p className="text-muted-foreground">
            {appDescription}
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {menuItems.map((item) => {
            const IconComponent = item.icon;
            return (
              <Card 
                key={item.id} 
                className="glass-card cursor-pointer transition-all duration-200 hover:shadow-lg hover:scale-105 group border-2 hover:border-primary/20"
                onClick={() => handleNavigate(item.id)}
              >
                <CardHeader className="pb-3">
                  <div className="flex items-center space-x-3">
                    <div className={`p-2 rounded-lg ${item.color} text-white group-hover:scale-110 transition-transform duration-200`}>
                      <IconComponent className="h-6 w-6" />
                    </div>
                    <CardTitle className="text-lg group-hover:text-primary transition-colors duration-200">
                      {item.title}
                    </CardTitle>
                  </div>
                </CardHeader>
                <CardContent>
                  <CardDescription className="text-sm leading-relaxed">
                    {item.description}
                  </CardDescription>
                </CardContent>
              </Card>
            );
          })}
        </div>
      </div>

      <AppFooter />
    </div>
  );
}
